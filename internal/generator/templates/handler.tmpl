package v1

import (
	"net/http"
	"{{.Module}}/domain/entities"
	"{{.Module}}/domain/types"
	"{{.Module}}/domain/usecases"
	"{{.Module}}/presentation/response"

	"github.com/gin-gonic/gin"
)

type {{.Entity}}Handler struct {
	BaseHandler
	useCase usecases.{{.Entity}}UseCase
}

func New{{.Entity}}Handler(useCase usecases.{{.Entity}}UseCase) *{{.Entity}}Handler {
	return &{{.Entity}}Handler{
		useCase: useCase,
	}
}

// FindAll : Find all {{.LowerEntity}}s
func (h *{{.Entity}}Handler) FindAll(ctx *gin.Context) {
	items, total, err := h.useCase.FindAll(types.FindAllPayload{
		AuthContext: h.GetAuthContext(ctx),
		Pagination:  h.GetPaginationParams(ctx),
	})
	if h.HandleError(ctx, err) {
		return
	}

	response.Success(ctx, http.StatusOK, gin.H{
		"items":      items,
		"totalItems": total,
	})
}

// FindByID : Get {{.LowerEntity}} by ID
func (h *{{.Entity}}Handler) FindByID(ctx *gin.Context) {
	item, err := h.useCase.FindByID(types.FindByIDPayload{
		AuthContext: h.GetAuthContext(ctx),
		ID:          types.ID(ctx.Param("id")),
	})
	if h.HandleError(ctx, err) {
		return
	}

	response.Success(ctx, http.StatusOK, item)
}

// Create : Create a {{.LowerEntity}}
func (h *{{.Entity}}Handler) Create(ctx *gin.Context) {
	var data entities.{{.Entity}}
	if !h.BindJSON(ctx, &data) {
		return
	}

	created, err := h.useCase.Create(types.CreatePayload[entities.{{.Entity}}]{
		AuthContext: h.GetAuthContext(ctx),
		Data:        &data,
	})
	if h.HandleError(ctx, err) {
		return
	}

	response.Success(ctx, http.StatusCreated, created)
}

// Update : Update a {{.LowerEntity}}
func (h *{{.Entity}}Handler) Update(ctx *gin.Context) {
	var data entities.{{.Entity}}
	if !h.BindJSON(ctx, &data) {
		return
	}

	updated, err := h.useCase.Update(types.UpdatePayload[entities.{{.Entity}}]{
		AuthContext: h.GetAuthContext(ctx),
		ID:          types.ID(ctx.Param("id")),
		Data:        &data,
	})
	if h.HandleError(ctx, err) {
		return
	}

	response.Success(ctx, http.StatusOK, updated)
}

// Delete : Delete a {{.LowerEntity}} by ID
func (h *{{.Entity}}Handler) Delete(ctx *gin.Context) {
	err := h.useCase.Delete(types.DeletePayload{
		AuthContext: h.GetAuthContext(ctx),
		ID:          types.ID(ctx.Param("id")),
	})
	if h.HandleError(ctx, err) {
		return
	}

	response.Success(ctx, http.StatusNoContent, nil)
}

// BatchDelete : Delete multiple {{.LowerEntity}} by IDs
func (h *{{.Entity}}Handler) BatchDelete(ctx *gin.Context) {
	var ids []types.ID
	if !h.BindJSON(ctx, &ids) {
		return
	}

	err := h.useCase.BatchDelete(types.BatchDeletePayload{
		AuthContext: h.GetAuthContext(ctx),
		IDs:         ids,
	})
	if h.HandleError(ctx, err) {
		return
	}

	response.Success(ctx, http.StatusNoContent, nil)
}