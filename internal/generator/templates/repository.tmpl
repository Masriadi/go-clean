package repositories

import (
	"{{.Module}}/domain/entities"
	"{{.Module}}/domain/types"

	"gorm.io/gorm"
)

type {{.LowerEntity}}Repository struct {
	db *gorm.DB
}

func New{{.Entity}}Repository(db *gorm.DB) entities.{{.Entity}}Repository {
	return &{{.LowerEntity}}Repository{
		db: db,
	}
}

// FindAll : Find all {{.LowerEntity}}s with pagination and search
func (r *{{.LowerEntity}}Repository) FindAll(params types.PaginationParams) ([]entities.{{.Entity}}, int, error) {
	return FindAll(FindAllOptions[entities.{{.Entity}}]{
		DB:           r.db,
		Model:        &entities.{{.Entity}}{},
		Params:       params,
		SearchFields: []string{"name"},
	})
}

// FindByID : Get {{.LowerEntity}} by ID
func (r *{{.LowerEntity}}Repository) FindByID(id types.ID) (*entities.{{.Entity}}, error) {
	return FindByID(FindByIDOptions[entities.{{.Entity}}]{
		DB:    r.db,
		Model: &entities.{{.Entity}}{},
		ID:    id,
	})
}

// Create : Create new {{.LowerEntity}}
func (r *{{.LowerEntity}}Repository) Create({{.LowerEntity}} *entities.{{.Entity}}) (*entities.{{.Entity}}, error) {
	return Create(CreateOptions[entities.{{.Entity}}]{
		DB:   r.db,
		Data: {{.LowerEntity}},
	})
}

// Update : Update {{.LowerEntity}} by ID
func (r *{{.LowerEntity}}Repository) Update(id types.ID, {{.LowerEntity}} *entities.{{.Entity}}) (*entities.{{.Entity}}, error) {
	return UpdateAndReturn(UpdateAndReturnOptions[entities.{{.Entity}}]{
		DB:    r.db,
		Model: &entities.{{.Entity}}{},
		ID:    id,
		Data:  {{.LowerEntity}},
	})
}

// Delete : Delete {{.LowerEntity}} by ID
func (r *{{.LowerEntity}}Repository) Delete(id types.ID) error {
	return Delete(DeleteOptions{
		DB:    r.db,
		Model: &entities.{{.Entity}}{},
		ID:    id,
	})
}