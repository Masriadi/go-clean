package repositories

import (
	"{{.Module}}/data/sources/local"
	"{{.Module}}/domain/entities"
	"{{.Module}}/domain/types"

	"gorm.io/gorm"
)

type {{.LowerEntity}}Repository struct {
	db *gorm.DB
}

func New{{.Entity}}Repository(db *gorm.DB) entities.{{.Entity}}Repository {
	return &{{.LowerEntity}}Repository{
		db: db,
	}
}

// FindAll : Find all pnsPenghargaans with pagination and search
func (r *{{.LowerEntity}}Repository) FindAll(params types.PaginationParams) ([]entities.{{.Entity}}, int, error) {
	return local.FindAll[entities.{{.Entity}}](
		r.db,
		&entities.{{.Entity}}{},
		params,
		[]string{"title"},
	)
}

// FindByID : Get {{.LowerEntity}} by ID
func (r *{{.LowerEntity}}Repository) FindByID(id types.ID) (*entities.{{.Entity}}, error) {
	return local.FindByID[entities.{{.Entity}}](r.db, &entities.{{.Entity}}{}, id)
}

// Create : Create new {{.LowerEntity}}
func (r *{{.LowerEntity}}Repository) Create({{.LowerEntity}} *entities.{{.Entity}}) (*entities.{{.Entity}}, error) {
	return local.Create(r.db, {{.LowerEntity}})
}

// Update : Update {{.LowerEntity}} by ID
func (r *{{.LowerEntity}}Repository) Update(id types.ID, {{.LowerEntity}} *entities.{{.Entity}}) (*entities.{{.Entity}}, error) {
	return local.UpdateAndReturn(r.db, &entities.{{.Entity}}{}, id, {{.LowerEntity}})
}

// Delete : Delete {{.LowerEntity}} by ID
func (r *{{.LowerEntity}}Repository) Delete(id types.ID) error {
	return local.Delete(r.db, &entities.{{.Entity}}{}, id)
}
