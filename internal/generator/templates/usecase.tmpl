package usecases

import (
	"{{.Module}}/domain/entities"
	"{{.Module}}/domain/types"
	"{{.Module}}/utils"
	"{{.Module}}/utils/constants"
)

type {{.Entity}}UseCase interface {
	FindAll(payload types.FindAllPayload) ([]entities.{{.Entity}}, int, error)
	FindByID(payload types.FindByIDPayload) (*entities.{{.Entity}}, error)
	Create(payload types.CreatePayload[entities.{{.Entity}}]) (*entities.{{.Entity}}, error)
	Update(payload types.UpdatePayload[entities.{{.Entity}}]) (*entities.{{.Entity}}, error)
	Delete(payload types.DeletePayload) error
	BatchDelete(payload types.BatchDeletePayload) error
}

type {{.LowerEntity}}UseCase struct {
	BaseUseCase
	repo entities.{{.Entity}}Repository
}

func New{{.Entity}}UseCase(repo entities.{{.Entity}}Repository) {{.Entity}}UseCase {
	return &{{.LowerEntity}}UseCase{
		repo: repo,
	}
}

// FindAll : Retrieve all records with filtering based on user scope
func (u *{{.LowerEntity}}UseCase) FindAll(payload types.FindAllPayload) ([]entities.{{.Entity}}, int, error) {
	u.InjectOwnScopeFilter(&payload.Pagination, map[string][]any{
		"created_by": {payload.UserID},
	}, payload.ActionScope)

	return u.repo.FindAll(payload.Pagination)
}

// FindByID : Retrieve a single record by ID and check access scope
func (u *{{.LowerEntity}}UseCase) FindByID(payload types.FindByIDPayload) (*entities.{{.Entity}}, error) {
	item, err := u.repo.FindByID(payload.ID)
	if err != nil {
		return nil, err
	}
	return item, u.CheckOwnScope(payload.UserID, item.CreatedBy, payload.ActionScope)
}

// Create : Insert new record, enforce created_by = UserID
func (u *{{.LowerEntity}}UseCase) Create(payload types.CreatePayload[entities.{{.Entity}}]) (*entities.{{.Entity}}, error) {
	payload.Data.ID = types.ID(utils.GenerateUUIDv7())

	if payload.ActionScope == constants.RBAC_SCOPE_OWN {
		// Enforce ownership for OWN scope; ignore client-provided CreatedBy
		payload.Data.CreatedBy = payload.UserID
	}

	return u.repo.Create(payload.Data)
}

// Update : Update record with permission check from existing data
func (u *{{.LowerEntity}}UseCase) Update(payload types.UpdatePayload[entities.{{.Entity}}]) (*entities.{{.Entity}}, error) {
	existing, err := u.repo.FindByID(payload.ID)
	if err != nil {
		return nil, err
	}

	// Enforce that only the owner (for OWN scope) can update
	if err := u.CheckOwnScope(payload.UserID, existing.CreatedBy, payload.ActionScope); err != nil {
		return nil, err
	}

	return u.repo.Update(payload.ID, payload.Data)
}

// Delete : Delete record, permission checked using existing data
func (u *{{.LowerEntity}}UseCase) Delete(payload types.DeletePayload) error {
	if payload.ActionScope == constants.RBAC_SCOPE_OWN {
		item, err := u.repo.FindByID(payload.ID)
		if err != nil {
			return err
		}
		if err := u.CheckOwnScope(payload.UserID, item.CreatedBy, payload.ActionScope); err != nil {
			return err
		}
	}

	return u.repo.Delete(payload.ID)
}

// BatchDelete : Delete record, permission checked using existing data
func (u *{{.LowerEntity}}UseCase) BatchDelete(payload types.BatchDeletePayload) error {
	if payload.ActionScope == constants.RBAC_SCOPE_OWN {
		for _, id := range payload.IDs {
			item, err := u.repo.FindByID(id)
			if err != nil {
				return err
			}
			if err := u.CheckOwnScope(payload.UserID, item.CreatedBy, payload.ActionScope); err != nil {
				return err
			}
		}
	}

	return u.repo.BatchDelete(payload.IDs)
}
